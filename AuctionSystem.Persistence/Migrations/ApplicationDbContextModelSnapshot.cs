// <auto-generated />
using System;
using AuctionSystem.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AuctionSystem.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 30)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AuctionSystem.Domain.Auth.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLoggedIn")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLoginTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("USER");

                    b.HasData(
                        new
                        {
                            Id = "7cc5cd62-6240-44e5-b44f-bff0ae73342",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d1772c9-b972-4276-aaff-27cdb771a667",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "juliusanwuli@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Chiamaka",
                            IsActive = true,
                            IsLoggedIn = false,
                            LastLoginTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Adegunju",
                            LockoutEnabled = false,
                            NormalizedEmail = "JULIUSANWULI@GMAIL.COM",
                            NormalizedUserName = "CHIAMAKA",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = true,
                            Role = 3,
                            SecurityStamp = "3ecf86bf-7755-49e9-95c5-ceb1781cfbf9",
                            TwoFactorEnabled = false,
                            UserName = "chiamaka"
                        },
                        new
                        {
                            Id = "9a6a928b-0e11-4d5d-8a29-b8f04445e72",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fe8eadc4-7b0a-43c0-8757-a4d3ce154be4",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "adepeace200@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Peace",
                            IsActive = true,
                            IsLoggedIn = false,
                            LastLoginTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Adegunju",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADEPEACE200@GMAIL.COM",
                            NormalizedUserName = "MASTRE",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = true,
                            Role = 1,
                            SecurityStamp = "5606c5a7-df85-49fc-b588-d6ef64dd8d2e",
                            TwoFactorEnabled = false,
                            UserName = "mastre"
                        },
                        new
                        {
                            Id = "9a6a928b-0e11-4d5d-8a29-b8f04445a29",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08bbae41-ceb3-42eb-91d0-65c26b55730b",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "adorable@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lea",
                            IsActive = true,
                            IsLoggedIn = false,
                            LastLoginTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Mastre",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADORABLE@GMAIL.COM",
                            NormalizedUserName = "SHINE",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = true,
                            Role = 2,
                            SecurityStamp = "aced3d9c-36f9-4a4c-92dc-c66fd61c4e64",
                            TwoFactorEnabled = false,
                            UserName = "shine"
                        });
                });

            modelBuilder.Entity("AuctionSystem.Domain.Entities.Bid", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<int>("AuthStatus")
                        .HasColumnType("int")
                        .HasColumnName("AUTH_STATUS");

                    b.Property<string>("Authorizer")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AUTHORIZER");

                    b.Property<string>("AuthorizerEmail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AUTHORIZER_EMAIL");

                    b.Property<string>("AuthorizersComment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AUTHORIZERS_COMMENT");

                    b.Property<decimal>("BidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BidId")
                        .HasColumnType("int");

                    b.Property<string>("BiddingRoomId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<DateTime?>("DateAuthorized")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATE_AUTHORIZED");

                    b.Property<DateTime>("DateInitiated")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATE_INITIATED");

                    b.Property<string>("Initiator")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("INITIATOR");

                    b.Property<string>("InitiatorEmail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("INITIATOR_EMAIL");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BiddingRoomId");

                    b.HasIndex("UserId1");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("AuctionSystem.Domain.Entities.BiddingRoom", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<int>("AuthStatus")
                        .HasColumnType("int")
                        .HasColumnName("AUTH_STATUS");

                    b.Property<string>("Authorizer")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AUTHORIZER");

                    b.Property<string>("AuthorizerEmail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AUTHORIZER_EMAIL");

                    b.Property<string>("AuthorizersComment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AUTHORIZERS_COMMENT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<decimal>("CurrentHighestBid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DateAuthorized")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATE_AUTHORIZED");

                    b.Property<DateTime>("DateInitiated")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATE_INITIATED");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("InitialPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Initiator")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("INITIATOR");

                    b.Property<string>("InitiatorEmail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("INITIATOR_EMAIL");

                    b.Property<string>("ItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoomId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("BiddingRooms");
                });

            modelBuilder.Entity("AuctionSystem.Domain.Entities.Invoice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<int>("AuthStatus")
                        .HasColumnType("int")
                        .HasColumnName("AUTH_STATUS");

                    b.Property<string>("Authorizer")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AUTHORIZER");

                    b.Property<string>("AuthorizerEmail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AUTHORIZER_EMAIL");

                    b.Property<string>("AuthorizersComment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AUTHORIZERS_COMMENT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<DateTime?>("DateAuthorized")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATE_AUTHORIZED");

                    b.Property<DateTime>("DateInitiated")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATE_INITIATED");

                    b.Property<string>("Initiator")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("INITIATOR");

                    b.Property<string>("InitiatorEmail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("INITIATOR_EMAIL");

                    b.Property<string>("InvoiceID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceStatus")
                        .HasColumnType("int");

                    b.Property<string>("RoomID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("AuctionSystem.Domain.Entities.Item", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<int>("AuthStatus")
                        .HasColumnType("int")
                        .HasColumnName("AUTH_STATUS");

                    b.Property<string>("Authorizer")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AUTHORIZER");

                    b.Property<string>("AuthorizerEmail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AUTHORIZER_EMAIL");

                    b.Property<string>("AuthorizersComment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AUTHORIZERS_COMMENT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<decimal>("CurrentHighestBid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DateAuthorized")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATE_AUTHORIZED");

                    b.Property<DateTime>("DateInitiated")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATE_INITIATED");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("InitialPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Initiator")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("INITIATOR");

                    b.Property<string>("InitiatorEmail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("INITIATOR_EMAIL");

                    b.Property<string>("ItemId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("Id");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("AuctionSystem.Domain.Entities.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AuthStatus")
                        .HasColumnType("int")
                        .HasColumnName("AUTH_STATUS");

                    b.Property<string>("Authorizer")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AUTHORIZER");

                    b.Property<string>("AuthorizerEmail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AUTHORIZER_EMAIL");

                    b.Property<string>("AuthorizersComment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AUTHORIZERS_COMMENT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<DateTime?>("DateAuthorized")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATE_AUTHORIZED");

                    b.Property<DateTime>("DateInitiated")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATE_INITIATED");

                    b.Property<string>("Initiator")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("INITIATOR");

                    b.Property<string>("InitiatorEmail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("INITIATOR_EMAIL");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("AuctionSystem.Domain.Entities.PendingUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<int>("AuthStatus")
                        .HasColumnType("int")
                        .HasColumnName("AUTH_STATUS");

                    b.Property<string>("Authorizer")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AUTHORIZER");

                    b.Property<string>("AuthorizerEmail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AUTHORIZER_EMAIL");

                    b.Property<string>("AuthorizersComment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AUTHORIZERS_COMMENT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<DateTime?>("DateAuthorized")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATE_AUTHORIZED");

                    b.Property<DateTime>("DateInitiated")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATE_INITIATED");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("Initiator")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("INITIATOR");

                    b.Property<string>("InitiatorEmail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("INITIATOR_EMAIL");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LAST_NAME");

                    b.Property<int>("RequestType")
                        .HasColumnType("int")
                        .HasColumnName("REQUEST_TYPE");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("ROLE");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("USER_NAME");

                    b.HasKey("Id");

                    b.ToTable("PENDING_USER");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("ROLE");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("ROLECLAIMS");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("USERCLAIMS");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("USERLOGINS");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("USERROLES");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("USERTOKENS");
                });

            modelBuilder.Entity("AuctionSystem.Domain.Entities.Bid", b =>
                {
                    b.HasOne("AuctionSystem.Domain.Entities.BiddingRoom", "BiddingRoom")
                        .WithMany("Bids")
                        .HasForeignKey("BiddingRoomId");

                    b.HasOne("AuctionSystem.Domain.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("BiddingRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuctionSystem.Domain.Entities.BiddingRoom", b =>
                {
                    b.HasOne("AuctionSystem.Domain.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("AuctionSystem.Domain.Entities.Payment", b =>
                {
                    b.HasOne("AuctionSystem.Domain.Entities.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AuctionSystem.Domain.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AuctionSystem.Domain.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuctionSystem.Domain.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AuctionSystem.Domain.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuctionSystem.Domain.Entities.BiddingRoom", b =>
                {
                    b.Navigation("Bids");
                });
#pragma warning restore 612, 618
        }
    }
}
